#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'voronota-js-vcblocks' script rapidly computes area KBPs-Layered-based interface energy of protein complexes.

Options:
    --akbps-layered-lib           string  *  input area KBPs library file path
    --akbps-layered-lib-weights   string     input area KBPs library weights file path
    --input | -i                  string  *  input file path or '_list' to read file paths from stdin
    --restrict-input              string     query to restrict input atoms, default is '[]'
    --rename-chains               string     chain name to set for all atoms, or chain renaming rule
    --subselect-contacts          string     query to subselect contacts, default is '[-min-seq-sep 6]'
    --output-table-file           string     output table file path, default is '_stdout' to print to stdout
    --processors                  number     maximum number of processors to run in parallel, default is 1
    --stdin-file                  string     input file path to replace stdin
    --run-faspr                   string     path to FASPR binary to rebuild side-chains
    --input-is-script                        flag to treat input file as vs script
    --input-is-tuple                         flag to treat input file as tuple (structure file, selection file, output file)
    --as-assembly                            flag to treat input file as biological assembly
    --help | -h                              flag to display help message and exit

Standard output:
    space-separated table of scores
    
Examples:

    voronota-js-vcblocks --akbps-layered-lib ./akbps_protein_protein_config_bundle.tar.gz --input ./model.pdb
    
    ls *.pdb | voronota-js-vcblocks --akbps-layered-lib ./akbps_protein_protein_config_bundle.tar.gz --input _list --processors 8

EOF
exit 1
}

function cat_stdin
{
	STDIN_SOURCE="$1"
	if [ "$STDIN_SOURCE" == "_stream" ]
	then
		cat
	else
		cat "$STDIN_SOURCE"
	fi
}

function get_input_basename
{
	INPUT_MAIN_BASENAME="$(basename $1)"
	INPUT_STDIN_FILE="$2"
	if [ "$INPUT_MAIN_BASENAME" == "_stream" ] || [ "$INPUT_MAIN_BASENAME" == "_list" ]
	then
		if [ "$INPUT_STDIN_FILE" != "_stream" ] 
		then
			basename "$INPUT_STDIN_FILE"
			return 0
		fi
	fi
	echo "$INPUT_MAIN_BASENAME"
}

function substitute_id_in_filename
{
	SUBSTITUTE_BASENAME="$(basename "$1")"
	SUBSTITUTE_TEMPLATE="$2"
	
	echo "$SUBSTITUTE_TEMPLATE" \
	| sed "s|-BASENAME-|${SUBSTITUTE_BASENAME}|"
}

readonly ZEROARG=$0
ALLARGS=("$@")

if [ -z "$1" ]
then
	print_help_and_exit
fi

if [[ $ZEROARG == *"/"* ]]
then
	cd "$(dirname ${ZEROARG})"
	export PATH="$(pwd):${PATH}"
	cd - &> /dev/null
fi

export LC_ALL=C

command -v voronota-js &> /dev/null || { echo >&2 "Error: 'voronota-js' executable not in binaries path"; exit 1; }

AKBPSLAYEREDLIB=""
AKBPSLAYEREDLIBWEIGHTS=""
INFILE=""
RESTRICT_INPUT="[]"
RENAME_CHAINS=""
SUBSELECT_CONTACTS="[-min-seq-sep 6]"
OUTPUT_TABLE_FILE="_stdout"
MAX_PROCESSORS="1"
STDIN_FILE="_stream"
RUN_FASPR=""
INPUT_IS_SCRIPT="false"
INPUT_IS_TUPLE="false"
AS_ASSEMBLY="false"
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	--akbps-layered-lib)
		AKBPSLAYEREDLIB="$OPTARG"
		shift
		;;
	--akbps-layered-lib-weights)
		AKBPSLAYEREDLIBWEIGHTS="$OPTARG"
		shift
		;;
	-i|--input)
		INFILE="$OPTARG"
		shift
		;;
	--restrict-input)
		RESTRICT_INPUT="$OPTARG"
		shift
		;;
	--rename-chains)
		RENAME_CHAINS="$OPTARG"
		shift
		;;
	--subselect-contacts)
		SUBSELECT_CONTACTS="$OPTARG"
		shift
		;;
	--output-table-file)
		OUTPUT_TABLE_FILE="$OPTARG"
		shift
		;;
	--processors)
		MAX_PROCESSORS="$OPTARG"
		shift
		;;
	--stdin-file)
		STDIN_FILE="$OPTARG"
		shift
		;;
	--run-faspr)
		RUN_FASPR="$OPTARG"
		shift
		;;
	--input-is-script)
		INPUT_IS_SCRIPT="true"
		;;
	--input-is-tuple)
		INPUT_IS_TUPLE="true"
		;;
	--as-assembly)
		AS_ASSEMBLY="true"
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

if [ -z "$AKBPSLAYEREDLIB" ]
then
	echo >&2 "Error: input area KBPs file not provided"
	exit 1
fi

if [ ! -s "$AKBPSLAYEREDLIB" ]
then
	echo >&2 "Error: input area KBPs file '$AKBPSLAYEREDLIB' does not exist"
	exit 1
fi

if [ -n "$AKBPSLAYEREDLIBWEIGHTS" ] && [ ! -s "$AKBPSLAYEREDLIBWEIGHTS" ]
then
	echo >&2 "Error: input area KBPs weights file '$AKBPSLAYEREDLIBWEIGHTS' does not exist"
	exit 1
fi

if [ -z "$INFILE" ]
then
	echo >&2 "Error: input file not provided"
	exit 1
fi

if [[ $INFILE == "_scriptline_"* ]]
then
	readonly TMPLDIR=$(mktemp -d)
	trap "rm -r $TMPLDIR" EXIT
	
	echo "$INFILE" | sed 's/^_scriptline_//' | sed 's/_-_/ /g' \
	> "$TMPLDIR/_extracted_script_line"
	
	if [ ! -s "$TMPLDIR/_extracted_script_line" ]
	then
		echo >&2 "Error: no input string line extracted"
		exit 1
	fi
	
	"$ZEROARG" "${ALLARGS[@]}" --input-is-script --input "$TMPLDIR/_extracted_script_line"
	
	exit 0
fi

if [ "$INFILE" != "_list" ] && [ "$INFILE" != "_stream" ] && [ ! -s "$INFILE" ]
then
	echo >&2 "Error: input file '$INFILE' does not exist"
	exit 1
fi

if [ "$STDIN_FILE" != "_stream" ] && [ ! -s "$STDIN_FILE" ]
then
	echo >&2 "Error: stdin replacement file '$STDIN_FILE' does not exist"
	exit 1
fi

if [ -n "$RUN_FASPR" ]
then
	if [ ! -s "$RUN_FASPR" ]
	then
		echo >&2 "Error: FASPR data file '$RUN_FASPR' does not exist"
		exit 1
	fi
	
	if [[ $RUN_FASPR != *".bin" ]]
	then
		echo >&2 "Error: FASPR data file '$RUN_FASPR' is not valid"
		exit 1
	fi
fi

if [ "$INFILE" == "_stream" ]
then
	readonly TMPLDIR=$(mktemp -d)
	trap "rm -r $TMPLDIR" EXIT
	
	cat_stdin "$STDIN_FILE" > "$TMPLDIR/_stream"
	
	if [ ! -s "$TMPLDIR/_stream" ]
	then
		echo >&2 "Error: no stdin data"
		exit 1
	fi
	
	"$ZEROARG" "${ALLARGS[@]}" --input "$TMPLDIR/_stream"
	
	exit 0
fi

if [ -z "$MAX_PROCESSORS" ] || [ "$MAX_PROCESSORS" -ne "$MAX_PROCESSORS" ] || [ "$MAX_PROCESSORS" -lt "1" ]
then
	echo >&2 "Error: invalid number of processors '$MAX_PROCESSORS', must be a positive number"
	exit 1
fi

if [ "$INFILE" == "_list" ] && [ "$MAX_PROCESSORS" -gt "1" ]
then
	readonly TMPLDIR=$(mktemp -d)
	trap "rm -r $TMPLDIR" EXIT
	
	cat_stdin "$STDIN_FILE" | egrep . | sort | uniq > "$TMPLDIR/input_list"
	
	if [ ! -s "$TMPLDIR/input_list" ]
	then
		echo >&2 "Error: no stdin data"
		exit 1
	fi
	
	NUM_OF_INPUTS="$(cat $TMPLDIR/input_list | wc -l)"
	SIZE_OF_PORTION="$(echo "a=$NUM_OF_INPUTS; b=$MAX_PROCESSORS; if(a%b) a/b+1 else a/b" | bc)"
	
	if [ "$SIZE_OF_PORTION" -gt "19997" ]
	then
		SIZE_OF_PORTION="19997"
	fi
	
	mkdir -p "$TMPLDIR/portions"
	
	split -l "$SIZE_OF_PORTION" "$TMPLDIR/input_list" "$TMPLDIR/portions/portion_"
	
	mkdir -p "$TMPLDIR/children_tables"
	
	find $TMPLDIR/portions/ -type f -not -empty \
	| awk -v outdir="$TMPLDIR/children_tables" '{print "--stdin-file " $1 " --output-table-file " outdir "/" NR ".txt"}' \
	| xargs -L 1 -P "$MAX_PROCESSORS" "$ZEROARG" "${ALLARGS[@]}" --processors 1 --input _list
		
	find "$TMPLDIR/children_tables" -type f -not -empty \
	| sort \
	| xargs -L 1 cat \
	| awk '{if(NR==1 || $1!="ID") print $0}' \
	> "$TMPLDIR/full_output_table"
	
	if [ -n "$OUTPUT_TABLE_FILE" ] && [ "$OUTPUT_TABLE_FILE" != "_stdout" ]
	then
		mkdir -p "$(dirname "$OUTPUT_TABLE_FILE")"
		cat "$TMPLDIR/full_output_table" > "$OUTPUT_TABLE_FILE"
	else
		cat "$TMPLDIR/full_output_table"
	fi
	
	exit 0
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

if [[ $AKBPSLAYEREDLIB == *".tar.gz" ]]
then
	tar -xf "$AKBPSLAYEREDLIB" -C "${TMPLDIR}/"
	
	EXTRACTED_AKBPSLAYEREDLIB="${TMPLDIR}/akbps_config_bundle/akbps_layered_lib"
	EXTRACTED_AKBPSLAYEREDLIBWEIGHTS="${TMPLDIR}/akbps_config_bundle/akbps_layered_lib_weights"
	
	if [ ! -s "$EXTRACTED_AKBPSLAYEREDLIB" ] || [ ! -s "$EXTRACTED_AKBPSLAYEREDLIBWEIGHTS" ]
	then
		echo >&2 "Error: invalid configuration bundle '$AKBPSLAYEREDLIB'"
		exit 1
	fi
	
	AKBPSLAYEREDLIB="$EXTRACTED_AKBPSLAYEREDLIB"
	
	if [ -z "$AKBPSLAYEREDLIBWEIGHTS" ]
	then
		AKBPSLAYEREDLIBWEIGHTS="$EXTRACTED_AKBPSLAYEREDLIBWEIGHTS"
	fi
fi

AKBPSBANKET_MODE="$(cat ${AKBPSLAYEREDLIB} | awk '{if($1=="ANY" || $3=="ANY"){print "true" ; exit}} END {print "false"}' | head -1)"

if [ "$INPUT_IS_TUPLE" == "true" ]
then
	OUTPUT_TABLE_FILE=""
else
	INFILE_BASENAME="$(get_input_basename $INFILE $STDIN_FILE)"
	OUTPUT_TABLE_FILE="$(substitute_id_in_filename "$INFILE_BASENAME" "$OUTPUT_TABLE_FILE")"
	mkdir -p "${TMPLDIR}/output_tables"
fi

{
cat << EOF
var common_params={}
common_params.akbps_layered_lib='$AKBPSLAYEREDLIB';
common_params.akbps_summing_weights='$AKBPSLAYEREDLIBWEIGHTS';
common_params.input_is_script='$INPUT_IS_SCRIPT';
common_params.input_as_assembly='$AS_ASSEMBLY';
common_params.restrict_input_atoms='$RESTRICT_INPUT';
common_params.rename_chains='$RENAME_CHAINS';
common_params.contacts_subselection='$SUBSELECT_CONTACTS';
common_params.run_faspr='$RUN_FASPR';
common_params.blanket_mode='$AKBPSBANKET_MODE';
var input_info_array=[];
EOF

{
if [ "$INFILE" == "_list" ]
then
	cat_stdin "$STDIN_FILE" | egrep . | sort | uniq
else
	echo "$INFILE"
fi
} | while read -r SUBINFILE
do
if [ "$INPUT_IS_TUPLE" == "true" ]
then
read SUBINFILE_ATOMSFILE SUBINFILE_SELECTIONFILE SUBINFILE_OUTPUTID SUBINFILE_OUTPUTFILE <<< "$(cat ${SUBINFILE} | tr '\n' ' ' | sed 's|\s\+| |g')"
mkdir -p "$(dirname ${SUBINFILE_OUTPUTFILE})"
cat << EOF
input_info_array.push({"atoms_file": "$SUBINFILE_ATOMSFILE", "selection_file": "$SUBINFILE_SELECTIONFILE", "output_id": "$SUBINFILE_OUTPUTID", "output_file": "$SUBINFILE_OUTPUTFILE"});
EOF
else
SUBINFILE_BASENAME="$(get_input_basename $SUBINFILE $STDIN_FILE)"
SUBINFILE_OUTPUTFILE="${TMPLDIR}/output_tables/${SUBINFILE_BASENAME}.txt"
cat << EOF
input_info_array.push({"atoms_file": "$SUBINFILE", "selection_file": "", "output_id": "$SUBINFILE_BASENAME", "output_file": "$SUBINFILE_OUTPUTFILE"});
EOF
fi
done

cat << 'EOF'
analyze_interface=function(params, input)
{

if(!input.atoms_file)
{
	throw ("No input file");
}

if(!params.input_is_script)
{
	params.input_is_script="false";
}

if(!params.input_as_assembly)
{
	params.input_as_assembly="false";
}

if(!params.restrict_input_atoms)
{
	params.restrict_input_atoms='[]';
}

if(!params.contacts_subselection)
{
	params.contacts_subselection='[]';
}

voronota_delete_objects();

if(params.input_is_script=="true")
{
	voronota_source("-file", input.atoms_file);
	voronota_assert_partial_success("Failed when running provided input script");
}
else
{
	voronota_import("-file", input.atoms_file, "-as-assembly", params.input_as_assembly);
	voronota_assert_partial_success("Failed to import file");
}

voronota_restrict_atoms("-use", params.restrict_input_atoms);
voronota_assert_full_success("Failed to restrict input atoms by the input query");

if(params.blanket_mode=="true")
{
	voronota_restrict_atoms("-use", "[-protein] or [-nucleic]");
	voronota_assert_full_success("Failed to restrict input atoms to protein or nucleic acids only");
}
else
{
	voronota_restrict_atoms("-use", "[-protein]");
	voronota_assert_full_success("Failed to restrict input atoms to protein only");
}

var result_initial_number_of_accepted_atoms=voronota_last_output().results[0].output.atoms_summary_new.number_total;

if(params.rename_chains)
{
	voronota_set_chain_name("-chain-name",  params.rename_chains);
	voronota_assert_full_success("Failed to rename chains");
}

if(params.run_faspr)
{
	voronota_faspr("-lib-file", params.run_faspr);
	voronota_assert_full_success("Failed to run FASPR");
}

voronota_construct_contacts_radically_fast("-adjunct-circle-restrictions", [-1.6, -1.2, -0.8, -0.4, -0.0000001], "-precutting-shifts", [0.9], "-add-collapsed-adjuncts", "-calculate-adjacencies");
voronota_assert_full_success("Failed to construct inter-chain contacts");

var selection_for_recording_vcblocks=params.contacts_subselection;

if(input.selection_file)
{
	if(input.selection_file!="undefined")
	{
		voronota_import_selection_of_contacts("-file", input.selection_file, "-name", "sel_from_file", "-no-serial", "-no-name");
		voronota_assert_full_success("Failed to select inter-chain contacts using file '"+input.selection_file+"'");
		selection_for_recording_vcblocks="(([sel_from_file]) and ("+selection_for_recording_vcblocks+"))";
	}
}

voronota_calculate_akbps_layered("-use", "[-min-seq-sep 2]", "-adj-prefix", "AKBP");
voronota_assert_full_success("Failed to compute area KBPs scores");

voronota_vcblocks(
  "-sel-for-recording", selection_for_recording_vcblocks,
  "-residue-value-names-for-encoding", ["volume", "sas_area", "area_near", "area_far"],
  "-far-contact-value-names-for-encoding", ["area", "boundary", "AKBP_kbp1_exp", "AKBP_kbp1_exp_sa1x", "AKBP_kbp1_exp_sa2x", "AKBP_kbp1_exp_sa3x", "AKBP_kbp1_exp_sa4x", "AKBP_kbp1_exp_sa5x", "AKBP_kbp1_exp_saXa", "AKBP_kbp1_exp_saXb", "AKBP_kbp1_exp_saXc", "AKBP_kbp1_exp_saXx", "AKBP_kbp1_obs", "AKBP_kbp1_obs_sa1x", "AKBP_kbp1_obs_sa2x", "AKBP_kbp1_obs_sa3x", "AKBP_kbp1_obs_sa4x", "AKBP_kbp1_obs_sa5x", "AKBP_kbp1_obs_saXa", "AKBP_kbp1_obs_saXb", "AKBP_kbp1_obs_saXc", "AKBP_kbp1_obs_saXx", "AKBP_kbp2_exp_a", "AKBP_kbp2_exp_a_sa1x", "AKBP_kbp2_exp_a_sa2x", "AKBP_kbp2_exp_a_sa3x", "AKBP_kbp2_exp_a_sa4x", "AKBP_kbp2_exp_a_sa5x", "AKBP_kbp2_exp_a_saXa", "AKBP_kbp2_exp_a_saXb", "AKBP_kbp2_exp_a_saXc", "AKBP_kbp2_exp_a_saXx", "AKBP_kbp2_exp_b", "AKBP_kbp2_exp_b_sa1x", "AKBP_kbp2_exp_b_sa2x", "AKBP_kbp2_exp_b_sa3x", "AKBP_kbp2_exp_b_sa4x", "AKBP_kbp2_exp_b_sa5x", "AKBP_kbp2_exp_b_saXa", "AKBP_kbp2_exp_b_saXb", "AKBP_kbp2_exp_b_saXc", "AKBP_kbp2_exp_b_saXx", "AKBP_kbp2_obs", "AKBP_kbp2_obs_sa1x", "AKBP_kbp2_obs_sa2x", "AKBP_kbp2_obs_sa3x", "AKBP_kbp2_obs_sa4x", "AKBP_kbp2_obs_sa5x", "AKBP_kbp2_obs_saXa", "AKBP_kbp2_obs_saXb", "AKBP_kbp2_obs_saXc", "AKBP_kbp2_obs_saXx", "AKBP_known_area", "AKBP_raw_sa1x", "AKBP_raw_sa2x", "AKBP_raw_sa3x", "AKBP_raw_sa4x", "AKBP_raw_sa5x", "AKBP_raw_saXa", "AKBP_raw_saXb", "AKBP_raw_saXc", "AKBP_raw_saXx", "AKBP_weighted_sum", "pcut00000levelareaM00000", "pcut00000levelareaM00040", "pcut00000levelareaM00080", "pcut00000levelareaM00120", "pcut00000levelareaM00160", "pcut00000subareaM00040toM00000", "pcut00000subareaM00080toM00040", "pcut00000subareaM00120toM00080", "pcut00000subareaM00160toM00120", "pcut00000subareaM99900toM00000", "pcut00000subareaM99900toM00160", "pcut00001levelareaM00000", "pcut00001levelareaM00040", "pcut00001levelareaM00080", "pcut00001levelareaM00120", "pcut00001levelareaM00160", "pcut00001subareaM00040toM00000", "pcut00001subareaM00080toM00040", "pcut00001subareaM00120toM00080", "pcut00001subareaM00160toM00120", "pcut00001subareaM99900toM00000", "pcut00001subareaM99900toM00160", "pcut00003levelareaM00000", "pcut00003levelareaM00040", "pcut00003levelareaM00080", "pcut00003levelareaM00120", "pcut00003levelareaM00160", "pcut00003subareaM00040toM00000", "pcut00003subareaM00080toM00040", "pcut00003subareaM00120toM00080", "pcut00003subareaM00160toM00120", "pcut00003subareaM99900toM00000", "pcut00003subareaM99900toM00160"],
  "-near-contact-value-names-for-encoding", ["area", "boundary"],
  "-output-table", input.output_file,
  "-output-id", input.output_id);
voronota_assert_full_success("Failed to calculate and output VCBlocks");

return true;
}

voronota_setup_defaults("-no-load-voromqa-potentials", "-no-load-alt-voromqa-potential", "-no-load-mock-voromqa-potential");

voronota_setup_akbps_layered("-potentials", common_params.akbps_layered_lib, "-summing-weights", common_params.akbps_summing_weights);
voronota_assert_full_success("Failed to setup area KBPs-Layered");

for(var i=0;i<input_info_array.length;i++)
{
	var subinput=input_info_array[i];
	try
	{
		analyze_interface(common_params, subinput);
	}
	catch(error)
	{
		log("Failed with '"+subinput.atoms_file+"': "+error);
	}
}

EOF

} \
| voronota-js --no-setup-defaults

if [ -n "$OUTPUT_TABLE_FILE" ]
then
	find "${TMPLDIR}/output_tables/" -type f -not -empty \
	| sort \
	| xargs cat \
	| awk '{if(NR==1 || $1!="ID") print $0}' \
	> "${TMPLDIR}/full_output_table"
	
	if [ ! -s "${TMPLDIR}/full_output_table" ]
	then
		echo >&2 "Error: no output table to write to '$OUTPUT_TABLE_FILE' for input '$INFILE'"
		exit 1
	fi
	
	if [ "$OUTPUT_TABLE_FILE" != "_stdout" ]
	then
		mkdir -p "$(dirname ${OUTPUT_TABLE_FILE})"
		cat "${TMPLDIR}/full_output_table" > "$OUTPUT_TABLE_FILE"
	else
		cat "${TMPLDIR}/full_output_table"
	fi
fi


